let Schema,model,profanityFilter;_627‍.x([["default",()=>_627‍.o]]);_627‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_627‍.w("../utils/profanityFilter",[["default",["profanityFilter"],function(v){profanityFilter=v}]]);
const { ObjectId } = Schema.Types;


const postSchema = new Schema({
  title: {
    type: String,
    required: true,
  },
  content: {
    type: String,
    required: true,
  },
  user: {
    type: ObjectId,
    ref: "User",
    required: true,
  },
  createdAt: { type: Date, default: Date.now },
  isApproved: {
    type: Boolean,
    default: true,
  },
});

postSchema.pre("validate", function (next) {
  if (!this.isModified("content")) {
    return next();
  }

  if (profanityFilter(this.content)) {
    this.isApproved = false;
    next();
  } else {
    next();
  }
});

const Post = model("Post", postSchema);

_627‍.d(Post);
